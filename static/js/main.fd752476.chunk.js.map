{"version":3,"sources":["App.js","numberScale.js","mockData.js","numberTable.js","serviceWorker.js","index.js"],"names":["App","React","useState","result","setResult","onPressed","value","calculate","reset","backSpace","eval","e","slice","className","NumberScale","type","disabled","numbers","id1","id","title","id2","id3","id4","id5","id6","id7","id8","id9","id10","id11","id12","id13","id14","id15","id16","NumberTable","Object","values","map","i","onClick","target","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0zBAKMA,IAAM,SAANA,MACJ,oBAA4BC,6CAAMC,SAAS,IAA3C,iNAAOC,OAAP,oBAAeC,UAAf,oBAGMC,UAAY,SAACC,GACH,MAAVA,EACFC,YACmB,MAAVD,EACRE,QACkB,MAAVF,EACTG,YACkB,KAATH,EAETF,UAAU,KAEHE,GACPF,UAAUD,OAASG,IAMjBC,UAAY,SAAZA,YACJ,IACEH,UAAUM,KAAMP,SAChB,MAAOQ,GACPP,UAAU,WAIRI,MAAQ,WACZJ,UAAU,KAGNK,UAAY,WAChBL,UAAUD,OAAOS,MAAM,GAAI,KAI3B,OACE,kEAAKC,UAAU,mBACb,2DAAC,4CAAD,CAAaV,OAAQA,SACrB,2DAAC,4CAAD,CAAeE,UAAWA,cAMnBL,2B,6BCrDf,yBAiBec,IAbM,SAAC,GAAe,IAAdX,EAAa,EAAbA,OACrB,OACE,6BACE,2BACEY,KAAK,OACLF,UAAU,8BACVP,MAAOH,EACPa,UAAU,O,kDCXLC,G,KAAU,CACnBC,IAAK,CACHC,GAAI,IACJC,MAAO,KAETC,IAAK,CACHF,GAAI,IACJC,MAAO,KAETE,IAAK,CACHH,GAAI,IACJC,MAAO,KAETG,IAAK,CACHJ,GAAI,IACJC,MAAO,KAETI,IAAK,CACHL,GAAI,IACJC,MAAO,KAETK,IAAK,CACHN,GAAI,IACJC,MAAO,KAETM,IAAK,CACHP,GAAI,IACJC,MAAO,KAETO,IAAK,CACHR,GAAI,IACJC,MAAO,KAETQ,IAAK,CACHT,GAAI,IACJC,MAAO,KAETS,KAAM,CACJV,GAAI,KACJC,MAAO,KAETU,KAAM,CACJX,GAAI,KACJC,MAAO,KAETW,KAAM,CACJZ,GAAI,KACJC,MAAO,KAETY,KAAM,CACJb,GAAI,KACJC,MAAO,KAETa,KAAM,CACJd,GAAI,KACJC,MAAO,KAETc,KAAM,CACJf,GAAI,KACJC,MAAO,KAETe,KAAM,CACJhB,GAAI,KACJC,MAAO,OCkGEgB,IA7JO,SAAC,GAAiB,IAAhB/B,EAAe,EAAfA,UAEpB,OACE,yBAAKQ,UAAU,mBAEXwB,OAAOC,OAAOrB,GAASsB,KAAI,SAAAC,GAAC,OAAK,4BAC/BlC,MAAOkC,EAAEpB,MACTL,KAAK,SACLF,UAAU,wBACV4B,QAAS,SAAC9B,GAAD,OAAON,EAAUM,EAAE+B,OAAOpC,SAClCkC,EAAEpB,a,8ICFKuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACjD,EAAA,EAAD,MAASkD,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.fd752476.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport NumberScale from \"./numberScale\";\nimport NumberTable from \"./numberTable\";\nimport \"./calculator.css\";\n\nconst App = () =>  {\n  const [result, setResult] = React.useState(\"\")\n\n  \n  const onPressed = (value) => {\n    if (value === \"=\") {\n      calculate();\n    } else if (value === \"c\") {\n       reset();\n    } else if (value === \"b\") {\n      backSpace();\n    } else if (value ===\"\") \n    {\n      setResult(\"0\");\n   } \n    else if (value) {\n      setResult(result + value);\n    }\n  };\n\n  \n\n  const calculate = () => {\n    try {\n      setResult(eval( result));\n    } catch (e) {\n      setResult(\"error\");\n    }\n  };\n\n  const reset = () => {\n    setResult(\"\");\n  };\n\n  const backSpace = () => {\n    setResult(result.slice(0, -1));\n  };\n\n \n    return (\n      <div className='calculator card'>\n        <NumberScale result={result} />\n        <NumberTable   onPressed={onPressed} />\n      </div>\n    );\n\n}\n\nexport default App\n","import React from \"react\";\nimport \"./calculator.css\";\n\n\nconst NumberScale  = ({result}) =>  {\n  return (\n    <div>\n      <input\n        type='text'\n        className='calculator-screen z-depth-1'\n        value={result}\n        disabled={true}\n      />\n    </div>\n  );\n}\n\nexport default NumberScale;\n","export const numbers = {\n    id1: {\n      id: \"1\",\n      title: \"1\",\n    },\n    id2: {\n      id: \"2\",\n      title: \"2\",\n    },\n    id3: {\n      id: \"3\",\n      title: \"3\",\n    },\n    id4: {\n      id: \"4\",\n      title: \"+\",\n    },\n    id5: {\n      id: \"5\",\n      title: \"4\",\n    },\n    id6: {\n      id: \"6\",\n      title: \"5\",\n    },\n    id7: {\n      id: \"7\",\n      title: \"6\",\n    },\n    id8: {\n      id: \"8\",\n      title: \"-\",\n    },\n    id9: {\n      id: \"9\",\n      title: \"7\",\n    },\n    id10: {\n      id: \"10\",\n      title: \"8\",\n    },\n    id11: {\n      id: \"11\",\n      title: \"9\",\n    },\n    id12: {\n      id: \"12\",\n      title: \"*\",\n    },\n    id13: {\n      id: \"13\",\n      title: \"c\",\n    },\n    id14: {\n      id: \"14\",\n      title: \"0\",\n    },\n    id15: {\n      id: \"15\",\n      title: \"=\",\n    },\n    id16: {\n      id: \"16\",\n      title: \"/\",\n    },\n  \n    //   id7: {\n    //     id: 7,\n    //     title: 7,\n    //   },\n    //   id8: {\n    //     id: 8,\n    //     title: 8,\n    //   },\n    //   id9: {\n    //     id: 9,\n    //     title: 9,\n    //   },\n    //   id0: {\n    //     id: 0,\n    //     title: 0,\n    //   },\n  };\n  ","import React  from \"react\";\nimport \"./calculator.css\";\nimport { numbers } from \"./mockData\";\n\nconst  NumberTable  = ({onPressed}) => {\n  \n    return (\n      <div className='calculator-keys'>\n        {\n          Object.values(numbers).map(i =>  <button\n            value={i.title}\n            type='button'\n            className='operator btn btn-info'\n            onClick={(e) => onPressed(e.target.value)}>\n            {i.title}\n          </button> )\n        }\n        {/* <button\n          value='1'\n          type='button'\n          className='operator btn btn-info'\n          onClick={(e) => onPressed(e.target.value)}>\n          1\n        </button>\n        <button\n          value='2'\n          type='button'\n          className='operator btn btn-info'\n          onClick={(e) => onPressed(e.target.value)}>\n          2\n        </button>\n        <button\n          value='3'\n          type='button'\n          className='operator btn btn-info'\n          onClick={(e) => onPressed(e.target.value)}>\n          3\n        </button>\n        <button\n          value='4'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          4\n        </button>\n        <button\n          value='5'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          5\n        </button>\n        <button\n          value='6'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          6\n        </button>\n        <button\n          value='7'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          7\n        </button>\n        <button\n          value='8'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          8\n        </button>\n        <button\n          value='9'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          9\n        </button>\n        <button\n          value='0'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          0\n        </button>\n        <button\n          value='('\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          (\n        </button>\n        <button\n          value=')'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          )\n        </button>\n        <button\n          value='.'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          .\n        </button>\n        <button\n          value='/'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          &divide;\n        </button>\n        <button\n          value='*'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          &times;\n        </button>\n        <button\n          value='+'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          +\n        </button>\n        <button\n          value='-'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          -\n        </button>\n        <button\n          value='='\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          =\n        </button>\n        <button\n          value='C'\n          type='button'\n          className='operator btn btn-info'\n          onClick={this.onPressed}>\n          C\n        </button>\n        <button\n          value='B'\n          type='button'\n          className='operator btn btn-danger'\n          onClick={this.onPressed}>\n          B\n        </button> */}\n      </div>\n    );\n \n}\nexport default NumberTable;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}